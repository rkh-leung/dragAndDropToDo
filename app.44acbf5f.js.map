{"version":3,"sources":["components/base-component.ts","models/interfaces.ts","decorators/autobind.ts","components/project-state.ts","components/project-item.ts","components/project-list.ts","utils/validation.ts","components/project-input.ts","app.ts"],"names":[],"mappings":"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","file":"app.44acbf5f.js","sourceRoot":"../src","sourcesContent":["// Component Base Class\nexport abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n  templateElement: HTMLTemplateElement\n  hostElement: T\n  element: U\n\n  constructor(\n    templateId: string,\n    hostElementId: string,\n    insertAtStart: boolean,\n    newElementId?: string\n  ) {\n    this.templateElement = document.getElementById(\n      templateId\n    )! as HTMLTemplateElement\n    this.hostElement = document.getElementById(hostElementId)! as T\n\n    const importedNode = document.importNode(this.templateElement.content, true)\n    this.element = importedNode.firstElementChild as U\n    if (newElementId) {\n      this.element.id = newElementId\n    }\n\n    this.attach(insertAtStart)\n  }\n\n  private attach(insertAtBeginning: boolean) {\n    this.hostElement.insertAdjacentElement(\n      insertAtBeginning ? 'afterbegin' : 'beforeend',\n      this.element\n    )\n  }\n\n  abstract configure(): void\n\n  abstract renderContent(): void\n}\n","// Drag & Drop Interfaces\nexport interface Draggable {\n  dragStartHandler(event: DragEvent): void\n\n  dragEndHandler(event: DragEvent): void\n}\n\nexport interface DragTarget {\n  dragOverHandler(event: DragEvent): void\n\n  dropHandler(event: DragEvent): void\n\n  dragLeaveHandler(event: DragEvent): void\n}\n\n// Project Type\nexport enum ProjectStatus {\n  Active,\n  Finished,\n}\n\nexport class Project {\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public people: number,\n    public status: ProjectStatus\n  ) {}\n}\n","// autobind decorator\nexport function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const boundFn = originalMethod.bind(this)\n      return boundFn\n    },\n  }\n  return adjDescriptor\n}\n","import { Project, ProjectStatus } from '../models/interfaces'\n\n// Project State Management\ntype Listener<T> = (items: T[]) => void\n\nexport class State<T> {\n  protected listeners: Listener<T>[] = []\n\n  addListener(listenerFn: Listener<T>) {\n    this.listeners.push(listenerFn)\n  }\n}\n\nclass ProjectState extends State<Project> {\n  private projects: Project[] = []\n  private static instance: ProjectState\n\n  private constructor() {\n    super()\n  }\n\n  static getInstance() {\n    if (this.instance) {\n      return this.instance\n    }\n    this.instance = new ProjectState()\n    return this.instance\n  }\n\n  addProject(title: string, description: string, numOfPeople: number) {\n    const newProject = new Project(\n      Math.random().toString(),\n      title,\n      description,\n      numOfPeople,\n      ProjectStatus.Active\n    )\n    this.projects.push(newProject)\n    this.updateListeners()\n  }\n\n  moveProject(projectId: string, newStatus: ProjectStatus) {\n    const project = this.projects.find((prj) => prj.id === projectId)\n    if (project && project.status !== newStatus) {\n      project.status = newStatus\n      this.updateListeners()\n    }\n  }\n\n  private updateListeners() {\n    for (const listenerFn of this.listeners) {\n      listenerFn(this.projects.slice())\n    }\n  }\n}\n\nexport const projectState = ProjectState.getInstance()\n","import { Component } from './base-component'\nimport { Draggable, Project } from '../models/interfaces'\nimport { autobind } from '../decorators/autobind'\n\n// ProjectItem Class\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  private project: Project\n\n  get persons() {\n    if (this.project.people === 1) {\n      return '1 person'\n    } else {\n      return `${this.project.people} persons`\n    }\n  }\n\n  constructor(hostId: string, project: Project) {\n    super('single-project', hostId, false, project.id)\n    this.project = project\n\n    this.configure()\n    this.renderContent()\n  }\n\n  @autobind\n  dragStartHandler(event: DragEvent) {\n    event.dataTransfer!.setData('text/plain', this.project.id)\n    event.dataTransfer!.effectAllowed = 'move'\n  }\n\n  dragEndHandler(_: DragEvent) {\n    console.log('DragEnd')\n  }\n\n  configure() {\n    this.element.addEventListener('dragstart', this.dragStartHandler)\n    this.element.addEventListener('dragend', this.dragEndHandler)\n  }\n\n  renderContent() {\n    this.element.querySelector('h2')!.textContent = this.project.title\n    this.element.querySelector('h3')!.textContent = this.persons + ' assigned'\n    this.element.querySelector('p')!.textContent = this.project.description\n  }\n}\n","import { Component } from './base-component'\nimport { DragTarget, Project, ProjectStatus } from '../models/interfaces'\nimport { autobind } from '../decorators/autobind'\nimport { projectState } from './project-state'\nimport { ProjectItem } from './project-item'\n\n// ProjectList Class\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  assignedProjects: Project[]\n\n  constructor(private type: 'active' | 'finished') {\n    super('project-list', 'app', false, `${type}-projects`)\n    this.assignedProjects = []\n\n    this.configure()\n    this.renderContent()\n  }\n\n  @autobind\n  dragOverHandler(event: DragEvent) {\n    if (event.dataTransfer && event.dataTransfer.types[0] === 'text/plain') {\n      event.preventDefault()\n      const listEl = this.element.querySelector('ul')!\n      listEl.classList.add('droppable')\n    }\n  }\n\n  @autobind\n  dropHandler(event: DragEvent) {\n    const prjId = event.dataTransfer!.getData('text/plain')\n    projectState.moveProject(\n      prjId,\n      this.type === 'active' ? ProjectStatus.Active : ProjectStatus.Finished\n    )\n  }\n\n  @autobind\n  dragLeaveHandler(_: DragEvent) {\n    const listEl = this.element.querySelector('ul')!\n    listEl.classList.remove('droppable')\n  }\n\n  configure() {\n    this.element.addEventListener('dragover', this.dragOverHandler)\n    this.element.addEventListener('dragleave', this.dragLeaveHandler)\n    this.element.addEventListener('drop', this.dropHandler)\n\n    projectState.addListener((projects: Project[]) => {\n      const relevantProjects = projects.filter((prj) => {\n        if (this.type === 'active') {\n          return prj.status === ProjectStatus.Active\n        }\n        return prj.status === ProjectStatus.Finished\n      })\n      this.assignedProjects = relevantProjects\n      this.renderProjects()\n    })\n  }\n\n  renderContent() {\n    const listId = `${this.type}-projects-list`\n    this.element.querySelector('ul')!.id = listId\n    this.element.querySelector('h2')!.textContent =\n      this.type.toUpperCase() + ' PROJECTS'\n  }\n\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-projects-list`\n    )! as HTMLUListElement\n    listEl.innerHTML = ''\n    for (const prjItem of this.assignedProjects) {\n      new ProjectItem(this.element.querySelector('ul')!.id, prjItem)\n    }\n  }\n}\n","// Validation\nexport interface Validatable {\n  value: string | number\n  required?: boolean\n  minLength?: number\n  maxLength?: number\n  min?: number\n  max?: number\n}\n\nexport function validate(validatableInput: Validatable) {\n  let isValid = true\n  if (validatableInput.required) {\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0\n  }\n  if (\n    validatableInput.minLength != null &&\n    typeof validatableInput.value === 'string'\n  ) {\n    isValid =\n      isValid && validatableInput.value.length >= validatableInput.minLength\n  }\n  if (\n    validatableInput.maxLength != null &&\n    typeof validatableInput.value === 'string'\n  ) {\n    isValid =\n      isValid && validatableInput.value.length <= validatableInput.maxLength\n  }\n  if (\n    validatableInput.min != null &&\n    typeof validatableInput.value === 'number'\n  ) {\n    isValid = isValid && validatableInput.value >= validatableInput.min\n  }\n  if (\n    validatableInput.max != null &&\n    typeof validatableInput.value === 'number'\n  ) {\n    isValid = isValid && validatableInput.value <= validatableInput.max\n  }\n  return isValid\n}\n","import { Component } from './base-component'\nimport { Validatable, validate } from '../utils/validation'\nimport { autobind } from '../decorators/autobind'\nimport { projectState } from './project-state'\n\n// ProjectInput Class\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n  titleInputElement: HTMLInputElement\n  descriptionInputElement: HTMLInputElement\n  peopleInputElement: HTMLInputElement\n\n  constructor() {\n    super('project-input', 'app', true, 'user-input')\n    this.titleInputElement = this.element.querySelector(\n      '#title'\n    ) as HTMLInputElement\n    this.descriptionInputElement = this.element.querySelector(\n      '#description'\n    ) as HTMLInputElement\n    this.peopleInputElement = this.element.querySelector(\n      '#people'\n    ) as HTMLInputElement\n    this.configure()\n  }\n\n  configure() {\n    this.element.addEventListener('submit', this.submitHandler)\n  }\n\n  renderContent() {}\n\n  private gatherUserInput(): [string, string, number] | void {\n    const enteredTitle = this.titleInputElement.value\n    const enteredDescription = this.descriptionInputElement.value\n    const enteredPeople = this.peopleInputElement.value\n\n    const titleValidatable: Validatable = {\n      value: enteredTitle,\n      required: true,\n    }\n    const descriptionValidatable: Validatable = {\n      value: enteredDescription,\n      required: true,\n      minLength: 5,\n    }\n    const peopleValidatable: Validatable = {\n      value: +enteredPeople,\n      required: true,\n      min: 1,\n      max: 5,\n    }\n\n    if (\n      !validate(titleValidatable) ||\n      !validate(descriptionValidatable) ||\n      !validate(peopleValidatable)\n    ) {\n      alert('Invalid input, please try again!')\n      return\n    } else {\n      return [enteredTitle, enteredDescription, +enteredPeople]\n    }\n  }\n\n  private clearInputs() {\n    this.titleInputElement.value = ''\n    this.descriptionInputElement.value = ''\n    this.peopleInputElement.value = ''\n  }\n\n  @autobind\n  private submitHandler(event: Event) {\n    event.preventDefault()\n    const userInput = this.gatherUserInput()\n    if (Array.isArray(userInput)) {\n      const [title, desc, people] = userInput\n      projectState.addProject(title, desc, people)\n      this.clearInputs()\n    }\n  }\n}\n","import { ProjectList } from './components/project-list'\nimport { ProjectInput } from './components/project-input'\n\nnew ProjectList('active')\nnew ProjectList('finished')\nnew ProjectInput()\n"]}